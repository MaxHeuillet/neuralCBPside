from math import log, exp, pow
import numpy as np
# import geometry
import collections
# import geometry_v3
from itertools import combinations, permutations
import random

class Game():
    
     def __init__(self, name, informative_symbols, noise, LossMatrix, FeedbackMatrix, SignalMatrices, mathcal_N, v, N_plus, V ):
        
        self.name = name
        self.LossMatrix = LossMatrix
        self.FeedbackMatrix = FeedbackMatrix
        self.SignalMatrices = SignalMatrices
        self.n_actions = len(self.LossMatrix)
        self.n_outcomes = len(self.LossMatrix[0])
        self.mathcal_N = mathcal_N 
        self.v = v
        self.N_plus = N_plus
        self.V = V


        self.N = len(self.LossMatrix)
        self.M = len(self.LossMatrix[0])
        self.noise = noise
        self.informative_symbols = informative_symbols
        
     def get_feedback(self, action, outcome ):
          if self.noise.get(action) == None:
               feedback = self.FeedbackMatrix[ action ][ outcome ]
          else:
               noise = self.noise[action]
               feedbacks = self.FeedbackMatrix[ action ]
               feedback = random.choices(feedbacks, weights=noise)[0]
          return feedback

def game_bandit( noise ):

    name = 'bandit'
    LossMatrix = np.array( [ [1, 1],[0, 1],[1, 0] ] )
    FeedbackMatrix = np.array(  [ [0, 1], [2, 2], [2, 2] ] )

    signal_matrices = [ np.array( [ [1, 0],[0, 1] ]), np.array( [ [1,1] ] ), np.array( [ [1,1] ] ) ] 

    mathcal_N = [  [1,2] ] 

    v = {1: {2: [ np.array([-1,  1]), np.array([0]), np.array([0])]}, } 
    
    N_plus =  collections.defaultdict(dict)
    N_plus[1][2] = [ 1, 2 ]

    V = collections.defaultdict(dict)
    V[1][2] = [ 0, ]

    informative_symbols = [0, 1]

    return Game( name, informative_symbols, noise, LossMatrix, FeedbackMatrix, signal_matrices, mathcal_N, v, N_plus, V )



def game_case1( noise ):

    name = 'case1'
    LossMatrix = np.array( [ [1, 1],[0, 1],[1, 0] ] )
    FeedbackMatrix = np.array(  [ [0, 1], [2, 2], [2, 2] ] )

    signal_matrices = [ np.array( [ [1, 0],[0, 1] ]), np.array( [ [1,1] ] ), np.array( [ [1,1] ] ) ] 

    mathcal_N = [  [1,2] ] 

    v = {1: {2: [ np.array([-1,  1]), np.array([0]), np.array([0])]}, } 
    
    N_plus =  collections.defaultdict(dict)
    N_plus[1][2] = [ 1, 2 ]

    V = collections.defaultdict(dict)
    V[1][2] = [ 0, ]

    informative_symbols = [0, 1]

    return Game( name, informative_symbols, noise, LossMatrix, FeedbackMatrix, signal_matrices, mathcal_N, v, N_plus, V )





def game_case1b( noise ):

    name = 'case1b'
    LossMatrix = np.array( [ [1, 1],[0, 1],[1/2, 0] ] )
    FeedbackMatrix = np.array(  [ [0, 1], [2, 2], [2, 2] ] )

    signal_matrices = [ np.array( [ [1, 0],[0, 1] ]), np.array( [ [1,1] ] ), np.array( [ [1,1] ] ) ] 

    mathcal_N = [  [1,2] ] 

    v = {1: {2: [ np.array([-1/2,  1]) ]}, } 
    
    N_plus =  collections.defaultdict(dict)
    N_plus[1][2] = [ 1, 2 ]

    V = collections.defaultdict(dict)
    V[1][2] = [ 0, ]

    informative_symbols = [0, 1]

    return Game( name, informative_symbols, noise, LossMatrix, FeedbackMatrix, signal_matrices, mathcal_N, v, N_plus, V )


def game_case1c( noise ):

    name = 'case1b'
    LossMatrix = np.array( [ [1, 2],[0, 1],[1, 0] ] )
    FeedbackMatrix = np.array(  [ [0, 1], [2, 2], [2, 2] ] )

    signal_matrices = [ np.array( [ [1, 0],[0, 1] ]), np.array( [ [1,1] ] ), np.array( [ [1,1] ] ) ] 

    mathcal_N = [  [1,2] ] 

    v = {1: {2: [ np.array([-1,  1]) ]}, } 
    
    N_plus =  collections.defaultdict(dict)
    N_plus[1][2] = [ 1, 2 ]

    V = collections.defaultdict(dict)
    V[1][2] = [ 0, ]

    informative_symbols = [0, 1]

    return Game( name, informative_symbols, noise, LossMatrix, FeedbackMatrix, signal_matrices, mathcal_N, v, N_plus, V )




def game_case2( noise ):

    name = 'case2'
    LossMatrix = np.array( [ [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                             [0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                             [1, 0, 1, 1, 1, 1, 1, 1, 1, 1],
                             [1, 1, 0, 1, 1, 1, 1, 1, 1, 1],
                             [1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
                             [1, 1, 1, 1, 0, 1, 1, 1, 1, 1],
                             [1, 1, 1, 1, 1, 0, 1, 1, 1, 1],
                             [1, 1, 1, 1, 1, 1, 0, 1, 1, 1],
                             [1, 1, 1, 1, 1, 1, 1, 0, 1, 1],
                             [1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
                             [1, 1, 1, 1, 1, 1, 1, 1, 1, 0] ] )
    
    FeedbackMatrix = np.array(  [ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 
                                  [10] * 10, 
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10 ] )

    signal_matrices = [ np.array( [ [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                                    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                                    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                                    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                                    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1] ] ), 

                                    np.array( [ [1]*10 ] ), 
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] )  ] 

    
    mathcal_N = [  [1,2], [1,3], [1,4], [1,5], [1,6], [1,7], [1,8], [1,9], [1,10],
                   [2,3], [2,4], [2,5], [2,6], [2,7], [2,8], [2,9], [2,10],
                   [3,4], [3,5], [3,6], [3,7], [3,8], [3,9], [3,10],
                   [4,5], [4,6], [4,7], [4,8], [4,9], [4,10],
                   [5,6], [5,7], [5,8], [5,9], [5,10],
                   [6,7], [6,8], [6,9], [6,10],
                   [7,8], [7,9], [7,10],
                   [8,9], [8,10],
                   [9,10],  ]   

    v = {1: {2: [ np.array([-1,  1, 0, 0, 0, 0, 0, 0, 0, 0]) ],
             3: [ np.array([-1,  0, 1, 0, 0, 0, 0, 0, 0, 0]) ],
             4: [ np.array([-1,  0, 0, 1, 0, 0, 0, 0, 0, 0]) ],
             5: [ np.array([-1,  0, 0, 0, 1, 0, 0, 0, 0, 0]) ],
             6: [ np.array([-1,  0, 0, 0, 0, 1, 0, 0, 0, 0]) ],
             7: [ np.array([-1,  0, 0, 0, 0, 0, 1, 0, 0, 0]) ],
             8: [ np.array([-1,  0, 0, 0, 0, 0, 0, 1, 0, 0]) ],
             9: [ np.array([-1,  0, 0, 0, 0, 0, 0, 0, 1, 0]) ],
             10:[ np.array([-1,  0, 0, 0, 0, 0, 0, 0, 0, 1]) ] },

        2: { 3: [ np.array([0,  -1, 1, 0, 0, 0, 0, 0, 0, 0]) ],
             4: [ np.array([0,  -1, 0, 1, 0, 0, 0, 0, 0, 0]) ],
             5: [ np.array([0,  -1, 0, 0, 1, 0, 0, 0, 0, 0]) ],
             6: [ np.array([0,  -1, 0, 0, 0, 1, 0, 0, 0, 0]) ],
             7: [ np.array([0,  -1, 0, 0, 0, 0, 1, 0, 0, 0]) ],
             8: [ np.array([0,  -1, 0, 0, 0, 0, 0, 1, 0, 0]) ],
             9: [ np.array([0,  -1, 0, 0, 0, 0, 0, 0, 1, 0]) ],
             10:[ np.array([0,  -1, 0, 0, 0, 0, 0, 0, 0, 1]) ] },

        3: { 4: [ np.array([0,  0, -1, 1, 0, 0, 0, 0, 0, 0]) ],
             5: [ np.array([0,  0, -1, 0, 1, 0, 0, 0, 0, 0]) ],
             6: [ np.array([0,  0, -1, 0, 0, 1, 0, 0, 0, 0]) ],
             7: [ np.array([0,  0, -1, 0, 0, 0, 1, 0, 0, 0]) ],
             8: [ np.array([0,  0, -1, 0, 0, 0, 0, 1, 0, 0]) ],
             9: [ np.array([0,  0, -1, 0, 0, 0, 0, 0, 1, 0]) ],
             10:[ np.array([0,  0, -1, 0, 0, 0, 0, 0, 0, 1]) ] },

        4: { 5: [ np.array([0,  0, 0, -1, 1, 0, 0, 0, 0, 0]) ],
             6: [ np.array([0,  0, 0, -1, 0, 1, 0, 0, 0, 0]) ],
             7: [ np.array([0,  0, 0, -1, 0, 0, 1, 0, 0, 0]) ],
             8: [ np.array([0,  0, 0, -1, 0, 0, 0, 1,  0, 0]) ],
             9: [ np.array([0,  0, 0, -1, 0, 0, 0, 0, 1, 0]) ],
             10:[ np.array([0,  0, 0, -1, 0, 0, 0, 0, 0, 1]) ] },

        5: { 6: [ np.array([0,  0, 0, 0, -1, 1, 0, 0, 0, 0]) ],
             7: [ np.array([0,  0, 0, 0, -1, 0, 1, 0, 0, 0]) ],
             8: [ np.array([0,  0, 0, 0, -1, 0, 0, 1, 0, 0]) ],
             9: [ np.array([0,  0, 0, 0, -1, 0, 0, 0, 1, 0]) ],
             10:[ np.array([0,  0, 0, 0, -1, 0, 0, 0, 0, 1]) ] },

        6: { 7: [ np.array([0,  0, 0, 0, 0, -1, 1, 0, 0, 0]) ],
             8: [ np.array([0,  0, 0, 0, 0, -1, 0, 1, 0, 0]) ],
             9: [ np.array([0,  0, 0, 0, 0, -1, 0, 0, 1, 0]) ],
             10:[ np.array([0,  0, 0, 0, 0, -1, 0, 0, 0, 1]) ] },

        7: { 8: [ np.array([0,  0, 0, 0, 0, 0, -1, 1, 0, 0]) ],
             9: [ np.array([0,  0, 0, 0, 0, 0, -1, 0, 1, 0]) ],
             10:[ np.array([0, 0, 0, 0, 0, 0,  -1, 0, 0, 1]) ] },

        8: { 9: [ np.array([0,  0, 0, 0, 0, 0, 0, -1, 1, 0]) ],
             10:[ np.array([0, 0, 0, 0, 0, 0, 0,  -1,  0, 1]) ] },

        9: { 10:[ np.array([0, 0, 0, 0, 0, 0, 0, 0, -1, 1]) ] },  } 
    
    N_plus =  collections.defaultdict(dict)
    N_plus[1][2] = [ 1, 2 ]
    N_plus[1][3] = [ 1, 3 ]
    N_plus[1][4] = [ 1, 4 ]
    N_plus[1][5] = [ 1, 5 ]
    N_plus[1][6] = [ 1, 6 ]
    N_plus[1][7] = [ 1, 7 ]
    N_plus[1][8] = [ 1, 8 ]
    N_plus[1][9] = [ 1, 9 ]
    N_plus[1][10] = [1, 10 ]

    N_plus[2][3] = [ 2, 3 ]
    N_plus[2][4] = [ 2, 4 ]
    N_plus[2][5] = [ 2, 5 ]
    N_plus[2][6] = [ 2, 6 ]
    N_plus[2][7] = [ 2, 7 ]
    N_plus[2][8] = [ 2, 8 ]
    N_plus[2][9] = [ 2, 9 ]
    N_plus[2][10] = [2, 10 ]

    N_plus[3][4] = [ 3, 4 ]
    N_plus[3][5] = [ 3, 5 ]
    N_plus[3][6] = [ 3, 6 ]
    N_plus[3][7] = [ 3, 7 ]
    N_plus[3][8] = [ 3, 8 ]
    N_plus[3][9] = [ 3, 9 ]
    N_plus[3][10] = [3, 10]

    N_plus[4][5] = [ 4, 5 ]
    N_plus[4][6] = [ 4, 6 ]
    N_plus[4][7] = [ 4, 7 ]
    N_plus[4][8] = [ 4, 8 ]
    N_plus[4][9] = [ 4, 9 ]
    N_plus[4][10] = [4, 10 ]

    N_plus[5][6] = [ 5, 6 ]
    N_plus[5][7] = [ 5, 7 ]
    N_plus[5][8] = [ 5, 8 ]
    N_plus[5][9] = [ 5, 9 ]
    N_plus[5][10] = [5, 10 ]

    N_plus[6][7] = [ 6, 7 ]
    N_plus[6][8] = [ 6, 8 ]
    N_plus[6][9] = [ 6, 9 ]
    N_plus[6][10] = [6, 10 ]

    N_plus[7][8] = [ 7, 8 ]
    N_plus[7][9] = [ 7, 9 ]
    N_plus[7][10] = [7, 10 ]

    N_plus[8][9] = [ 8, 9 ]
    N_plus[8][10] = [8, 10 ]

    N_plus[9][10] = [ 9, 10 ]

    V = collections.defaultdict(dict)
    V[1][2] = [ 0, ] 
    V[1][3] = [ 0, ]  
    V[1][4] = [ 0, ]  
    V[1][5] = [ 0, ]  
    V[1][6] = [ 0, ]  
    V[1][7] = [ 0, ] 
    V[1][8] = [ 0, ]  
    V[1][9] = [ 0, ]  
    V[1][10] = [0, ]  

    V[2][3] = [ 0, ]
    V[2][4] = [ 0, ]
    V[2][5] = [ 0, ]
    V[2][6] = [ 0, ]
    V[2][7] = [ 0, ]
    V[2][8] = [ 0, ]
    V[2][9] = [ 0, ]
    V[2][10] = [0, ]

    V[3][4] = [ 0, ]
    V[3][5] = [ 0, ]
    V[3][6] = [ 0, ]
    V[3][7] = [ 0, ]
    V[3][8] = [ 0, ]
    V[3][9] = [ 0, ]
    V[3][10] = [0,  ]

    V[4][5] = [ 0, ]
    V[4][6] = [ 0, ]
    V[4][7] = [ 0, ]
    V[4][8] = [ 0, ]
    V[4][9] = [ 0, ]
    V[4][10] = [0,  ]

    V[5][6] = [ 0, ]
    V[5][7] = [ 0, ]
    V[5][8] = [ 0, ]
    V[5][9] = [ 0, ]
    V[5][10] = [0,  ]

    V[6][7] = [ 0, ]
    V[6][8] = [ 0, ]
    V[6][9] = [ 0, ]
    V[6][10] = [0,  ]

    V[7][8] = [ 0, ]
    V[7][9] = [ 0, ]
    V[7][10] = [0,  ]

    V[8][9] = [ 0, ]
    V[8][10] = [0,  ]

    V[9][10] = [ 0,  ]

    informative_symbols = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9,]

    return Game( name,  informative_symbols, noise, LossMatrix, FeedbackMatrix, signal_matrices, mathcal_N, v, N_plus, V )




def game_26( noise ):

     name = 'case26'
     LossMatrix = np.array( [ [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                              [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                              [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                              [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                              [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                              [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                              [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                              [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                              [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                              [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                              [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1],
                              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1],
                              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],       
                              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1],
                              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1],
                              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1],
                              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1],
                              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
                              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], ] )
     
     FeedbackMatrix = np.array(  [ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], 
                                   [26] * 26, 
                                   [26] * 26,
                                   [26] * 26,
                                   [26] * 26,
                                   [26] * 26,
                                   [26] * 26,
                                   [26] * 26,
                                   [26] * 26,
                                   [26] * 26,
                                   [26] * 26,
                                   [26] * 26,
                                   [26] * 26, 
                                   [26] * 26,
                                   [26] * 26,
                                   [26] * 26,
                                   [26] * 26,
                                   [26] * 26,
                                   [26] * 26,
                                   [26] * 26,
                                   [26] * 26,
                                   [26] * 26,
                                   [26] * 26,
                                   [26] * 26,
                                   [26] * 26,
                                   [26] * 26,
                                   [26] * 26, ] )

     signal_matrices = [ np.array( [ [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                        [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                        [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                        [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1] ] ), 

                                        np.array( [ [1]*26 ] ), 
                                        np.array( [ [1]*26 ] ),
                                        np.array( [ [1]*26 ] ),
                                        np.array( [ [1]*26 ] ),
                                        np.array( [ [1]*26 ] ),
                                        np.array( [ [1]*26 ] ),
                                        np.array( [ [1]*26 ] ),
                                        np.array( [ [1]*26 ] ),
                                        np.array( [ [1]*26 ] ),
                                        np.array( [ [1]*26 ] ),
                                        np.array( [ [1]*26 ] ),
                                        np.array( [ [1]*26 ] ),
                                        np.array( [ [1]*26 ] ),
                                        np.array( [ [1]*26 ] ),
                                        np.array( [ [1]*26 ] ),
                                        np.array( [ [1]*26 ] ),
                                        np.array( [ [1]*26 ] ),
                                        np.array( [ [1]*26 ] ),
                                        np.array( [ [1]*26 ] ),
                                        np.array( [ [1]*26 ] ),
                                        np.array( [ [1]*26 ] ),
                                        np.array( [ [1]*26 ] ),
                                        np.array( [ [1]*26 ] ),
                                        np.array( [ [1]*26 ] ),
                                        np.array( [ [1]*26 ] ),
                                        np.array( [ [1]*26 ] ),  ] 

     mathcal_N = []
     N = 26
     for i in range(1, N+1):
          for j in range(1, N+1):
               if j>i:
                    mathcal_N.append([i,j])  

     
     v= {}
     for i in range(1, N+1):
          v_prime = {}
          for j in range(1, N+1):
               if j>i:
                    v_prime[j] = [ np.array([0]*N) ]
          v[i] = v_prime
     for i in range(1, N+1):
          for j in range(1, N+1):
               if j>i:
                    v[i][j][0][i-1] = -1
                    v[i][j][0][j-1] = 1
     del v[N]
    
     N_plus =  collections.defaultdict(dict)
     N_plus[1][2] = [ 1, 2 ]
     N_plus[1][3] = [ 1, 3 ]
     N_plus[1][4] = [ 1, 4 ]
     N_plus[1][5] = [ 1, 5 ]
     N_plus[1][6] = [ 1, 6 ]
     N_plus[1][7] = [ 1, 7 ]
     N_plus[1][8] = [ 1, 8 ]
     N_plus[1][9] = [ 1, 9 ]
     N_plus[1][10] = [1, 10 ]
     N_plus[1][11] = [1, 11 ]
     N_plus[1][12] = [1, 12 ]
     N_plus[1][13] = [1, 13 ]
     N_plus[1][14] = [1, 14 ]
     N_plus[1][15] = [1, 15 ]
     N_plus[1][16] = [1, 16 ]
     N_plus[1][17] = [1, 17 ]
     N_plus[1][18] = [1, 18 ]
     N_plus[1][19] = [1, 19 ]
     N_plus[1][20] = [1, 20 ]
     N_plus[1][21] = [1, 21 ]
     N_plus[1][22] = [1, 22 ]
     N_plus[1][23] = [1, 23 ]
     N_plus[1][24] = [1, 24 ]
     N_plus[1][25] = [1, 25 ]
     N_plus[1][26] = [1, 26 ]

     N_plus[2][3] = [ 2, 3 ]
     N_plus[2][4] = [ 2, 4 ]
     N_plus[2][5] = [ 2, 5 ]
     N_plus[2][6] = [ 2, 6 ]
     N_plus[2][7] = [ 2, 7 ]
     N_plus[2][8] = [ 2, 8 ]
     N_plus[2][9] = [ 2, 9 ]
     N_plus[2][10] = [2, 10 ]
     N_plus[2][11] = [2, 11 ]
     N_plus[2][12] = [2, 12 ]
     N_plus[2][13] = [2, 13 ]
     N_plus[2][14] = [2, 14 ]
     N_plus[2][15] = [2, 15 ]
     N_plus[2][16] = [2, 16 ]
     N_plus[2][17] = [2, 17 ]
     N_plus[2][18] = [2, 18 ]
     N_plus[2][19] = [2, 19 ]
     N_plus[2][20] = [2, 20 ]
     N_plus[2][21] = [2, 21 ]
     N_plus[2][22] = [2, 22 ]
     N_plus[2][23] = [2, 23 ]
     N_plus[2][24] = [2, 24 ]
     N_plus[2][25] = [2, 25 ]
     N_plus[2][26] = [2, 26 ]

     N_plus[3][4] = [ 3, 4 ]
     N_plus[3][5] = [ 3, 5 ]
     N_plus[3][6] = [ 3, 6 ]
     N_plus[3][7] = [ 3, 7 ]
     N_plus[3][8] = [ 3, 8 ]
     N_plus[3][9] = [ 3, 9 ]
     N_plus[3][10] = [3, 10]
     N_plus[3][11] = [3, 11]
     N_plus[3][12] = [3, 12]
     N_plus[3][13] = [3, 13]
     N_plus[3][14] = [3, 14]
     N_plus[3][15] = [3, 15]
     N_plus[3][16] = [3, 16]
     N_plus[3][17] = [3, 17]
     N_plus[3][18] = [3, 18]
     N_plus[3][19] = [3, 19]
     N_plus[3][20] = [3, 20]
     N_plus[3][21] = [3, 21]
     N_plus[3][22] = [3, 22]
     N_plus[3][23] = [3, 23]
     N_plus[3][24] = [3, 24]
     N_plus[3][25] = [3, 25]
     N_plus[3][26] = [3, 26]

     N_plus[4][5] = [ 4, 5 ]
     N_plus[4][6] = [ 4, 6 ]
     N_plus[4][7] = [ 4, 7 ]
     N_plus[4][8] = [ 4, 8 ]
     N_plus[4][9] = [ 4, 9 ]
     N_plus[4][10] = [4, 10 ]
     N_plus[4][11] = [4, 11 ]
     N_plus[4][12] = [4, 12 ]
     N_plus[4][13] = [4, 13 ]
     N_plus[4][14] = [4, 14 ]
     N_plus[4][15] = [4, 15 ]
     N_plus[4][16] = [4, 16 ]
     N_plus[4][17] = [4, 17 ]
     N_plus[4][18] = [4, 18 ]
     N_plus[4][19] = [4, 19 ]
     N_plus[4][20] = [4, 20 ]
     N_plus[4][21] = [4, 21 ]
     N_plus[4][22] = [4, 22 ]
     N_plus[4][23] = [4, 23 ]
     N_plus[4][24] = [4, 24 ]
     N_plus[4][25] = [4, 25 ]
     N_plus[4][26] = [4, 26 ]

     N_plus[5][6] = [ 5, 6 ]
     N_plus[5][7] = [ 5, 7 ]
     N_plus[5][8] = [ 5, 8 ]
     N_plus[5][9] = [ 5, 9 ]
     N_plus[5][10] = [5, 10 ]
     N_plus[5][11] = [5, 11 ]
     N_plus[5][12] = [5, 12 ]
     N_plus[5][13] = [5, 13 ]
     N_plus[5][14] = [5, 14 ]
     N_plus[5][15] = [5, 15 ]
     N_plus[5][16] = [5, 16 ]
     N_plus[5][17] = [5, 17 ]
     N_plus[5][18] = [5, 18 ]
     N_plus[5][19] = [5, 19 ]
     N_plus[5][20] = [5, 20 ]
     N_plus[5][21] = [5, 21 ]
     N_plus[5][22] = [5, 22 ]
     N_plus[5][23] = [5, 23 ]
     N_plus[5][24] = [5, 24 ]
     N_plus[5][25] = [5, 25 ]
     N_plus[5][26] = [5, 26 ]

     N_plus[6][7] = [ 6, 7 ]
     N_plus[6][8] = [ 6, 8 ]
     N_plus[6][9] = [ 6, 9 ]
     N_plus[6][10] = [6, 10 ]
     N_plus[6][11] = [6, 11 ]
     N_plus[6][12] = [6, 12 ]
     N_plus[6][13] = [6, 13 ]
     N_plus[6][14] = [6, 14 ]
     N_plus[6][15] = [6, 15 ]
     N_plus[6][16] = [6, 16 ]
     N_plus[6][17] = [6, 17 ]
     N_plus[6][18] = [6, 18 ]
     N_plus[6][19] = [6, 19 ]
     N_plus[6][20] = [6, 20 ]
     N_plus[6][21] = [6, 21 ]
     N_plus[6][22] = [6, 22 ]
     N_plus[6][23] = [6, 23 ]
     N_plus[6][24] = [6, 24 ]
     N_plus[6][25] = [6, 25 ]
     N_plus[6][256] = [6, 26 ]

     N_plus[7][8] = [ 7, 8 ]
     N_plus[7][9] = [ 7, 9 ]
     N_plus[7][10] = [7, 10 ]
     N_plus[7][11] = [7, 11 ]
     N_plus[7][12] = [7, 12 ]
     N_plus[7][13] = [7, 13 ]
     N_plus[7][14] = [7, 14 ]
     N_plus[7][15] = [7, 15 ]
     N_plus[7][16] = [7, 16 ]
     N_plus[7][17] = [7, 17 ]
     N_plus[7][18] = [7, 18 ]
     N_plus[7][19] = [7, 19 ]
     N_plus[7][20] = [7, 20 ]
     N_plus[7][21] = [7, 21 ]
     N_plus[7][22] = [7, 22 ]
     N_plus[7][23] = [7, 23 ]
     N_plus[7][24] = [7, 24 ]
     N_plus[7][25] = [7, 25 ]
     N_plus[7][26] = [7, 26 ]

     N_plus[8][9] = [ 8, 9 ]
     N_plus[8][10] = [8, 10 ]
     N_plus[8][11] = [8, 11 ]
     N_plus[8][12] = [8, 12 ]
     N_plus[8][13] = [8, 13 ]
     N_plus[8][14] = [8, 14 ]
     N_plus[8][15] = [8, 15 ]
     N_plus[8][16] = [8, 16 ]
     N_plus[8][17] = [8, 17 ]
     N_plus[8][18] = [8, 18 ]
     N_plus[8][19] = [8, 19 ]
     N_plus[8][20] = [8, 20 ]
     N_plus[8][21] = [8, 21 ]
     N_plus[8][22] = [8, 22 ]
     N_plus[8][23] = [8, 23 ]
     N_plus[8][24] = [8, 24 ]
     N_plus[8][25] = [8, 25 ]
     N_plus[8][26] = [8, 26 ]

     N_plus[9][10] = [ 9, 10 ]
     N_plus[9][11] = [ 9, 11 ]
     N_plus[9][12] = [ 9, 12 ]
     N_plus[9][13] = [ 9, 13 ]
     N_plus[9][14] = [ 9, 14 ]
     N_plus[9][15] = [ 9, 15 ]
     N_plus[9][16] = [ 9, 16 ]
     N_plus[9][17] = [ 9, 17 ]
     N_plus[9][18] = [ 9, 18 ]
     N_plus[9][19] = [ 9, 19 ]
     N_plus[9][20] = [ 9, 20 ]
     N_plus[9][21] = [ 9, 21 ]
     N_plus[9][22] = [ 9, 22 ]
     N_plus[9][23] = [ 9, 23 ]
     N_plus[9][24] = [ 9, 24 ]
     N_plus[9][25] = [ 9, 25 ]
     N_plus[9][26] = [ 9, 26 ]

     N_plus[10][11] = [ 10, 11 ]
     N_plus[10][12] = [ 10, 12 ]
     N_plus[10][13] = [ 10, 13 ]
     N_plus[10][14] = [ 10, 14 ]
     N_plus[10][15] = [ 10, 15 ]
     N_plus[10][16] = [ 10, 16 ]
     N_plus[10][17] = [ 10, 17 ]
     N_plus[10][18] = [ 10, 18 ]
     N_plus[10][19] = [ 10, 19 ]
     N_plus[10][20] = [ 10, 20 ]
     N_plus[10][21] = [ 10, 21 ]
     N_plus[10][22] = [ 10, 22 ]
     N_plus[10][23] = [ 10, 23 ]
     N_plus[10][24] = [ 10, 24 ]
     N_plus[10][25] = [ 10, 25 ]
     N_plus[10][26] = [ 10, 26 ]

     N_plus[11][12] = [ 11, 12 ]
     N_plus[11][13] = [ 11, 13 ]
     N_plus[11][14] = [ 11, 14 ]
     N_plus[11][15] = [ 11, 15 ]
     N_plus[11][16] = [ 11, 16 ]
     N_plus[11][17] = [ 11, 17 ]
     N_plus[11][18] = [ 11, 18 ]
     N_plus[11][19] = [ 11, 19 ]
     N_plus[11][20] = [ 11, 20 ]
     N_plus[11][21] = [ 11, 21 ]
     N_plus[11][22] = [ 11, 22 ]
     N_plus[11][23] = [ 11, 23 ]
     N_plus[11][24] = [ 11, 24 ]
     N_plus[11][25] = [ 11, 25 ]
     N_plus[11][26] = [ 11, 26 ]


     N_plus[12][13] = [ 12, 13 ]
     N_plus[12][14] = [ 12, 14 ]
     N_plus[12][15] = [ 12, 15 ]
     N_plus[12][16] = [ 12, 16 ]
     N_plus[12][17] = [ 12, 17 ]
     N_plus[12][18] = [ 12, 18 ]
     N_plus[12][19] = [ 12, 19 ]
     N_plus[12][20] = [ 12, 20 ]
     N_plus[12][21] = [ 12, 21 ]
     N_plus[12][22] = [ 12, 22 ]
     N_plus[12][23] = [ 12, 23 ]
     N_plus[12][24] = [ 12, 24 ]
     N_plus[12][25] = [ 12, 25 ]
     N_plus[12][26] = [ 12, 26 ]

     N_plus[13][14] = [ 13, 14 ]
     N_plus[13][15] = [ 13, 15 ]
     N_plus[13][16] = [ 13, 16 ]
     N_plus[13][17] = [ 13, 17 ]
     N_plus[13][18] = [ 13, 18 ]
     N_plus[13][19] = [ 13, 19 ]
     N_plus[13][20] = [ 13, 20 ]
     N_plus[13][21] = [ 13, 21 ]
     N_plus[13][22] = [ 13, 22 ]
     N_plus[13][23] = [ 13, 23 ]
     N_plus[13][24] = [ 13, 24 ]
     N_plus[13][25] = [ 13, 25 ]
     N_plus[13][26] = [ 13, 26 ]

     N_plus[14][15] = [ 14, 15 ]
     N_plus[14][16] = [ 14, 16 ]
     N_plus[14][17] = [ 14, 17 ]
     N_plus[14][18] = [ 14, 18 ]
     N_plus[14][19] = [ 14, 19 ]
     N_plus[14][20] = [ 14, 20 ]
     N_plus[14][21] = [ 14, 21 ]
     N_plus[14][22] = [ 14, 22 ]
     N_plus[14][23] = [ 14, 23 ]
     N_plus[14][24] = [ 14, 24 ]
     N_plus[14][25] = [ 14, 25 ]
     N_plus[14][26] = [ 14, 26 ]

     N_plus[15][16] = [ 15, 16 ]
     N_plus[15][17] = [ 15, 17 ]
     N_plus[15][18] = [ 15, 18 ]
     N_plus[15][19] = [ 15, 19 ]
     N_plus[15][20] = [ 15, 20 ]
     N_plus[15][21] = [ 15, 21 ]
     N_plus[15][22] = [ 15, 22 ]
     N_plus[15][23] = [ 15, 23 ]
     N_plus[15][24] = [ 15, 24 ]
     N_plus[15][25] = [ 15, 25 ]
     N_plus[15][26] = [ 15, 26 ]

     N_plus[16][17] = [ 16, 17 ]
     N_plus[16][18] = [ 16, 18 ]
     N_plus[16][19] = [ 16, 19 ]
     N_plus[16][20] = [ 16, 20 ]
     N_plus[16][21] = [ 16, 21 ]
     N_plus[16][22] = [ 16, 22 ]
     N_plus[16][23] = [ 16, 23 ]
     N_plus[16][24] = [ 16, 24 ]
     N_plus[16][25] = [ 16, 25 ]
     N_plus[16][26] = [ 16, 26 ]

     N_plus[17][18] = [ 17, 18 ]
     N_plus[17][19] = [ 17, 19 ]
     N_plus[17][20] = [ 17, 20 ]
     N_plus[17][21] = [ 17, 21 ]
     N_plus[17][22] = [ 17, 22 ]
     N_plus[17][23] = [ 17, 23 ]
     N_plus[17][24] = [ 17, 24 ]
     N_plus[17][25] = [ 17, 25 ]
     N_plus[17][26] = [ 17, 26 ]

     N_plus[18][19] = [ 18, 19 ]
     N_plus[18][20] = [ 18, 20 ]
     N_plus[18][21] = [ 18, 21 ]
     N_plus[18][22] = [ 18, 22 ]
     N_plus[18][23] = [ 18, 23 ]
     N_plus[18][24] = [ 18, 24 ]
     N_plus[18][25] = [ 18, 25 ]
     N_plus[18][26] = [ 18, 26 ]

     N_plus[19][20] = [ 19, 20 ]
     N_plus[19][21] = [ 19, 21 ]
     N_plus[19][22] = [ 19, 22 ]
     N_plus[19][23] = [ 19, 23 ]
     N_plus[19][24] = [ 19, 24 ]
     N_plus[19][25] = [ 19, 25 ]
     N_plus[19][26] = [ 19, 26 ]

     N_plus[20][21] = [ 20, 21 ]
     N_plus[20][22] = [ 20, 22 ]
     N_plus[20][23] = [ 20, 23 ]
     N_plus[20][24] = [ 20, 24 ]
     N_plus[20][25] = [ 20, 25 ]
     N_plus[20][26] = [ 20, 26 ]

     N_plus[21][22] = [ 21, 22 ]
     N_plus[21][23] = [ 21, 23 ]
     N_plus[21][24] = [ 21, 24 ]
     N_plus[21][25] = [ 21, 25 ]
     N_plus[21][26] = [ 21, 26 ]

     N_plus[22][23] = [ 22, 23 ]
     N_plus[22][24] = [ 22, 24 ]
     N_plus[22][25] = [ 22, 25 ]
     N_plus[22][26] = [ 22, 26 ]

     N_plus[23][24] = [ 23, 24 ]
     N_plus[23][25] = [ 23, 25 ]
     N_plus[23][26] = [ 23, 26 ]

     N_plus[24][25] = [ 24, 25 ]
     N_plus[24][26] = [ 24, 26 ]

     N_plus[25][26] = [ 25, 26 ]



     V = collections.defaultdict(dict)
     V[1][2] = [ 0,  ] 
     V[1][3] = [ 0, ]  
     V[1][4] = [ 0, ]  
     V[1][5] = [ 0, ]  
     V[1][6] = [ 0, ]  
     V[1][7] = [ 0, ] 
     V[1][8] = [ 0, ]  
     V[1][9] = [ 0, ]  
     V[1][10] = [0, ]  
     V[1][11] = [0, ]  
     V[1][12] = [0, ]  
     V[1][13] = [0, ]  
     V[1][14] = [0, ]  
     V[1][15] = [0, ]  
     V[1][16] = [0, ]  
     V[1][17] = [0, ]  
     V[1][18] = [0, ]  
     V[1][19] = [0, ]  
     V[1][20] = [0, ]  
     V[1][21] = [0, ]  
     V[1][22] = [0, ]  
     V[1][23] = [0, ]  
     V[1][24] = [0, ]  
     V[1][25] = [0, ]  
     V[1][26] = [0, ]  


     V[2][3] = [ 0, ]
     V[2][4] = [ 0, ]
     V[2][5] = [ 0, ]
     V[2][6] = [ 0, ]
     V[2][7] = [ 0, ]
     V[2][8] = [ 0, ]
     V[2][9] = [ 0, ]
     V[2][10] = [0,  ]
     V[2][11] = [0,  ]
     V[2][12] = [0,  ]
     V[2][13] = [0,  ]
     V[2][14] = [0,  ]
     V[2][15] = [0,  ]
     V[2][16] = [0,  ]
     V[2][17] = [0,  ]
     V[2][18] = [0,  ]
     V[2][19] = [0,  ]
     V[2][20] = [0,  ]
     V[2][21] = [0,  ]
     V[2][22] = [0,  ]
     V[2][23] = [0,  ]
     V[2][24] = [0,  ]
     V[2][25] = [0,  ]
     V[2][26] = [0,  ]

     V[3][4] = [ 0, ]
     V[3][5] = [ 0, ]
     V[3][6] = [ 0, ]
     V[3][7] = [ 0, ]
     V[3][8] = [ 0, ]
     V[3][9] = [ 0, ]
     V[3][10] = [0,  ]
     V[3][11] = [0,  ]
     V[3][12] = [0,  ]
     V[3][13] = [0,  ]
     V[3][14] = [0,  ]
     V[3][15] = [0,  ]
     V[3][16] = [0,  ]
     V[3][17] = [0,  ]
     V[3][18] = [0,  ]
     V[3][19] = [0,  ]
     V[3][20] = [0,  ]
     V[3][21] = [0,  ]
     V[3][22] = [0,  ]
     V[3][23] = [0,  ]
     V[3][24] = [0,  ]
     V[3][25] = [0,  ]
     V[3][26] = [0,  ]

     V[4][5] = [ 0, ]
     V[4][6] = [ 0, ]
     V[4][7] = [ 0, ]
     V[4][8] = [ 0, ]
     V[4][9] = [ 0, ]
     V[4][10] = [0,  ]
     V[4][11] = [0,  ]
     V[4][12] = [0,  ]
     V[4][13] = [0,  ]
     V[4][14] = [0,  ]
     V[4][15] = [0,  ]
     V[4][16] = [0,  ]
     V[4][17] = [0,  ]
     V[4][18] = [0,  ]
     V[4][19] = [0,  ]
     V[4][20] = [0,  ]
     V[4][21] = [0,  ]
     V[4][22] = [0,  ]
     V[4][23] = [0,  ]
     V[4][24] = [0,  ]
     V[4][25] = [0,  ]
     V[4][26] = [0,  ]

     V[5][6] = [ 0, ]
     V[5][7] = [ 0, ]
     V[5][8] = [ 0, ]
     V[5][9] = [ 0, ]
     V[5][10] = [0,  ]
     V[5][11] = [0,  ]
     V[5][12] = [0,  ]
     V[5][13] = [0,  ]
     V[5][14] = [0,  ]
     V[5][15] = [0,  ]
     V[5][16] = [0,  ]
     V[5][17] = [0,  ]
     V[5][18] = [0,  ]
     V[5][19] = [0,  ]
     V[5][20] = [0,  ]
     V[5][21] = [0,  ]
     V[5][22] = [0,  ]
     V[5][23] = [0,  ]
     V[5][24] = [0,  ]
     V[5][25] = [0,  ]
     V[5][26] = [0,  ]

     V[6][7] = [ 0, ]
     V[6][8] = [ 0, ]
     V[6][9] = [ 0, ]
     V[6][10] = [0,  ]
     V[6][11] = [0,  ]
     V[6][12] = [0,  ]
     V[6][13] = [0,  ]
     V[6][14] = [0,  ]
     V[6][15] = [0,  ]
     V[6][16] = [0,  ]
     V[6][17] = [0,  ]
     V[6][18] = [0,  ]
     V[6][19] = [0,  ]
     V[6][20] = [0,  ]
     V[6][21] = [0,  ]
     V[6][22] = [0,  ]
     V[6][23] = [0,  ]
     V[6][24] = [0,  ]
     V[6][25] = [0,  ]
     V[6][26] = [0,  ]

     V[7][8] = [ 0, ]
     V[7][9] = [ 0, ]
     V[7][10] = [0,  ]
     V[7][11] = [0,  ]
     V[7][12] = [0,  ]
     V[7][13] = [0,  ]
     V[7][14] = [0,  ]
     V[7][15] = [0,  ]
     V[7][16] = [0,  ]
     V[7][17] = [0,  ]
     V[7][18] = [0,  ]
     V[7][19] = [0,  ]
     V[7][20] = [0,  ]
     V[7][21] = [0,  ]
     V[7][22] = [0,  ]
     V[7][23] = [0,  ]
     V[7][24] = [0,  ]
     V[7][25] = [0,  ]
     V[7][26] = [0,  ]

     V[8][9] = [ 0, ]
     V[8][10] = [0,  ]
     V[8][11] = [0,  ]
     V[8][12] = [0,  ]
     V[8][13] = [0,  ]
     V[8][14] = [0,  ]
     V[8][15] = [0,  ]
     V[8][16] = [0,  ]
     V[8][17] = [0,  ]
     V[8][18] = [0,  ]
     V[8][19] = [0,  ]
     V[8][20] = [0,  ]
     V[8][21] = [0,  ]
     V[8][22] = [0,  ]
     V[8][23] = [0,  ]
     V[8][24] = [0,  ]
     V[8][25] = [0,  ]
     V[8][26] = [0,  ]

     V[9][10] = [0,  ]
     V[9][11] = [0,  ]
     V[9][12] = [0,  ]
     V[9][13] = [0,  ]
     V[9][14] = [0,  ]
     V[9][15] = [0,  ]
     V[9][16] = [0,  ]
     V[9][17] = [0,  ]
     V[9][18] = [0,  ]
     V[9][19] = [0,  ]
     V[9][20] = [0,  ]
     V[9][21] = [0,  ]
     V[9][22] = [0,  ]
     V[9][23] = [0,  ]
     V[9][24] = [0,  ]
     V[9][25] = [0,  ]
     V[9][26] = [0,  ]

     V[10][11] = [0,  ]
     V[10][12] = [0,  ]
     V[10][13] = [0,  ]
     V[10][14] = [0,  ]
     V[10][15] = [0,  ]
     V[10][16] = [0,  ]
     V[10][17] = [0,  ]
     V[10][18] = [0,  ]
     V[10][19] = [0,  ]
     V[10][20] = [0,  ]
     V[10][21] = [0,  ]
     V[10][22] = [0,  ]
     V[10][23] = [0,  ]
     V[10][24] = [0,  ]
     V[10][25] = [0,  ]
     V[10][26] = [0,  ]

     V[11][12] = [0,  ]
     V[11][13] = [0,  ]
     V[11][14] = [0,  ]
     V[11][15] = [0,  ]
     V[11][16] = [0,  ]
     V[11][17] = [0,  ]
     V[11][18] = [0,  ]
     V[11][19] = [0,  ]
     V[11][20] = [0,  ]
     V[11][21] = [0,  ]
     V[11][22] = [0,  ]
     V[11][23] = [0,  ]
     V[11][24] = [0,  ]
     V[11][25] = [0,  ]
     V[11][26] = [0,  ]

     V[12][13] = [0,  ]
     V[12][14] = [0,  ]
     V[12][15] = [0,  ]
     V[12][16] = [0,  ]
     V[12][17] = [0,  ]
     V[12][18] = [0,  ]
     V[12][19] = [0,  ]
     V[12][20] = [0,  ]
     V[12][21] = [0,  ]
     V[12][22] = [0,  ]
     V[12][23] = [0,  ]
     V[12][24] = [0,  ]
     V[12][25] = [0,  ]
     V[12][26] = [0,  ]

     V[13][14] = [0,  ]
     V[13][15] = [0,  ]
     V[13][16] = [0,  ]
     V[13][17] = [0,  ]
     V[13][18] = [0,  ]
     V[13][19] = [0,  ]
     V[13][20] = [0,  ]
     V[13][21] = [0,  ]
     V[13][22] = [0,  ]
     V[13][23] = [0,  ]
     V[13][24] = [0,  ]
     V[13][25] = [0,  ]
     V[13][26] = [0,  ]

     V[14][15] = [0,  ]
     V[14][16] = [0,  ]
     V[14][17] = [0,  ]
     V[14][18] = [0,  ]
     V[14][19] = [0,  ]
     V[14][20] = [0,  ]
     V[14][21] = [0,  ]
     V[14][22] = [0,  ]
     V[14][23] = [0,  ]
     V[14][24] = [0,  ]
     V[14][25] = [0,  ]
     V[14][26] = [0,  ]

     V[15][16] = [0,  ]
     V[15][17] = [0,  ]
     V[15][18] = [0,  ]
     V[15][19] = [0,  ]
     V[15][20] = [0,  ]
     V[15][21] = [0,  ]
     V[15][22] = [0,  ]
     V[15][23] = [0,  ]
     V[15][24] = [0,  ]
     V[15][25] = [0,  ]
     V[15][26] = [0,  ]

     V[16][17] = [0,  ]
     V[16][18] = [0,  ]
     V[16][19] = [0,  ]
     V[16][20] = [0,  ]
     V[16][21] = [0,  ]
     V[16][22] = [0,  ]
     V[16][23] = [0,  ]
     V[16][24] = [0,  ]
     V[16][25] = [0,  ]
     V[16][26] = [0,  ]

     V[17][18] = [0,  ]
     V[17][19] = [0,  ]
     V[17][20] = [0,  ]
     V[17][21] = [0,  ]
     V[17][22] = [0,  ]
     V[17][23] = [0,  ]
     V[17][24] = [0,  ]
     V[17][25] = [0,  ]
     V[17][26] = [0,  ]

     V[18][19] = [0,  ]
     V[18][20] = [0,  ]
     V[18][21] = [0,  ]
     V[18][22] = [0,  ]
     V[18][23] = [0,  ]
     V[18][24] = [0,  ]
     V[18][25] = [0,  ]
     V[18][26] = [0,  ]

     V[19][20] = [0,  ]
     V[19][21] = [0,  ]
     V[19][22] = [0,  ]
     V[19][23] = [0,  ]
     V[19][24] = [0,  ]
     V[19][25] = [0,  ]
     V[19][26] = [0,  ]

     V[20][21] = [0,  ]
     V[20][22] = [0,  ]
     V[20][23] = [0,  ]
     V[20][24] = [0,  ]
     V[20][25] = [0,  ]
     V[20][26] = [0,  ]

     V[21][22] = [0,  ]
     V[21][23] = [0,  ]
     V[21][24] = [0,  ]
     V[21][25] = [0,  ]
     V[21][26] = [0,  ]

     V[22][23] = [0,  ]
     V[22][24] = [0,  ]
     V[22][25] = [0,  ]
     V[22][26] = [0,  ]

     V[23][24] = [0,  ]
     V[23][25] = [0,  ]
     V[23][26] = [0,  ]

     V[24][25] = [0,  ]
     V[24][26] = [0,  ]

     V[25][26] = [0,  ]

     informative_symbols = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]

     return Game( name,  informative_symbols, noise, LossMatrix, FeedbackMatrix, signal_matrices, mathcal_N, v, N_plus, V )









def game_case_seven( noise ):

    name = 'case_seven'
    LossMatrix = np.array( [ [1, 1, 1, 1, 1, 1, 1, ],
                             [0, 1, 1, 1, 1, 1, 1, ],
                             [1, 0, 1, 1, 1, 1, 1, ],
                             [1, 1, 0, 1, 1, 1, 1, ],
                             [1, 1, 1, 0, 1, 1, 1, ],
                             [1, 1, 1, 1, 0, 1, 1, ],
                             [1, 1, 1, 1, 1, 0, 1, ],
                             [1, 1, 1, 1, 1, 1, 0, ], ] )
    
    FeedbackMatrix = np.array(  [ [0, 1, 2, 3, 4, 5, 6, ], 
                                  [10] * 7, 
                                  [10] * 7,
                                  [10] * 7,
                                  [10] * 7,
                                  [10] * 7,
                                  [10] * 7,
                                  [10] * 7, ] )

    signal_matrices = [ np.array( [ [1, 0, 0, 0, 0, 0, 0,],
                                    [0, 1, 0, 0, 0, 0, 0,],
                                    [0, 0, 1, 0, 0, 0, 0,],
                                    [0, 0, 0, 1, 0, 0, 0,],
                                    [0, 0, 0, 0, 1, 0, 0,],
                                    [0, 0, 0, 0, 0, 1, 0,],
                                    [0, 0, 0, 0, 0, 0, 1,], ] ), 

                                    np.array( [ [1]*7 ] ), 
                                    np.array( [ [1]*7 ] ),
                                    np.array( [ [1]*7 ] ),
                                    np.array( [ [1]*7 ] ),
                                    np.array( [ [1]*7 ] ),
                                    np.array( [ [1]*7 ] ),
                                    np.array( [ [1]*7 ] ), ] 

    
    mathcal_N = [  [1,2], [1,3], [1,4], [1,5], [1,6], [1,7], 
                   [2,3], [2,4], [2,5], [2,6], [2,7], 
                   [3,4], [3,5], [3,6], [3,7], 
                   [4,5], [4,6], [4,7], 
                   [5,6], [5,7], 
                   [6,7],   ]   

    v = {1: {2: [ np.array([-1,  1, 0, 0, 0, 0, 0, ]) ],
             3: [ np.array([-1,  0, 1, 0, 0, 0, 0, ]) ],
             4: [ np.array([-1,  0, 0, 1, 0, 0, 0, ]) ],
             5: [ np.array([-1,  0, 0, 0, 1, 0, 0, ]) ],
             6: [ np.array([-1,  0, 0, 0, 0, 1, 0, ]) ],
             7: [ np.array([-1,  0, 0, 0, 0, 0, 1, ]) ], },

        2: { 3: [ np.array([0,  -1, 1, 0, 0, 0, 0, ]) ],
             4: [ np.array([0,  -1, 0, 1, 0, 0, 0, ]) ],
             5: [ np.array([0,  -1, 0, 0, 1, 0, 0, ]) ],
             6: [ np.array([0,  -1, 0, 0, 0, 1, 0, ]) ],
             7: [ np.array([0,  -1, 0, 0, 0, 0, 1, ]) ], },

        3: { 4: [ np.array([0,  0, -1, 1, 0, 0, 0,]) ],
             5: [ np.array([0,  0, -1, 0, 1, 0, 0,]) ],
             6: [ np.array([0,  0, -1, 0, 0, 1, 0,]) ],
             7: [ np.array([0,  0, -1, 0, 0, 0, 1,]) ],},

        4: { 5: [ np.array([0,  0, 0, -1, 1, 0, 0, ]) ],
             6: [ np.array([0,  0, 0, -1, 0, 1, 0, ]) ],
             7: [ np.array([0,  0, 0, -1, 0, 0, 1, ]) ], },

        5: { 6: [ np.array([0,  0, 0, 0, -1, 1, 0, ]) ],
             7: [ np.array([0,  0, 0, 0, -1, 0, 1, ]) ],},

        6: { 7: [ np.array([0,  0, 0, 0, 0, -1, 1, ]) ],},  } 
    
    N_plus =  collections.defaultdict(dict)
    N_plus[1][2] = [ 1, 2 ]
    N_plus[1][3] = [ 1, 3 ]
    N_plus[1][4] = [ 1, 4 ]
    N_plus[1][5] = [ 1, 5 ]
    N_plus[1][6] = [ 1, 6 ]
    N_plus[1][7] = [ 1, 7 ]

    N_plus[2][3] = [ 2, 3 ]
    N_plus[2][4] = [ 2, 4 ]
    N_plus[2][5] = [ 2, 5 ]
    N_plus[2][6] = [ 2, 6 ]
    N_plus[2][7] = [ 2, 7 ]

    N_plus[3][4] = [ 3, 4 ]
    N_plus[3][5] = [ 3, 5 ]
    N_plus[3][6] = [ 3, 6 ]
    N_plus[3][7] = [ 3, 7 ]

    N_plus[4][5] = [ 4, 5 ]
    N_plus[4][6] = [ 4, 6 ]
    N_plus[4][7] = [ 4, 7 ]

    N_plus[5][6] = [ 5, 6 ]
    N_plus[5][7] = [ 5, 7 ]

    N_plus[6][7] = [ 6, 7 ]


    V = collections.defaultdict(dict)
    V[1][2] = [ 0,  ] 
    V[1][3] = [ 0, ]  
    V[1][4] = [ 0, ]  
    V[1][5] = [ 0, ]  
    V[1][6] = [ 0, ]  
    V[1][7] = [ 0, ] 
    
    V[2][3] = [ 0, ]
    V[2][4] = [ 0, ]
    V[2][5] = [ 0, ]
    V[2][6] = [ 0, ]
    V[2][7] = [ 0, ]

    V[3][4] = [ 0, ]
    V[3][5] = [ 0, ]
    V[3][6] = [ 0, ]
    V[3][7] = [ 0, ]

    V[4][5] = [ 0, ]
    V[4][6] = [ 0, ]
    V[4][7] = [ 0, ]

    V[5][6] = [ 0, ]
    V[5][7] = [ 0, ]

    V[6][7] = [ 0, ]

    informative_symbols = [0, 1, 2, 3, 4, 5, 6, ]

    return Game( name,  informative_symbols, noise, LossMatrix, FeedbackMatrix, signal_matrices, mathcal_N, v, N_plus, V )





def game_case3(  noise ):
    
     name = 'case3'
     LossMatrix = np.array( [ [2, 1, 3, 1, 2, 1, 10, 1, 1, 1],
                             [0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                             [1, 0, 1, 1, 1, 1, 1, 1, 1, 1],
                             [1, 1, 0, 1, 1, 1, 1, 1, 1, 1],
                             [1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
                             [1, 1, 1, 1, 0, 1, 1, 1, 1, 1],
                             [1, 1, 1, 1, 1, 0, 1, 1, 1, 1],
                             [1, 1, 1, 1, 1, 1, 0, 1, 1, 1],
                             [1, 1, 1, 1, 1, 1, 1, 0, 1, 1],
                             [1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
                             [1, 1, 1, 1, 1, 1, 1, 1, 1, 0] ] )
     
     FeedbackMatrix = np.array(  [ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 
                                  [10] * 10, 
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10 ] )
     
     signal_matrices = [ np.array( [ [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                                    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                                    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                                    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                                    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1] ] ), 

                                    np.array( [ [1]*10 ] ), 
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] )  ] 
     

     mathcal_N = [  [1,2], [1,3], [1,4], [1,5], [1,6], [1,7], [1,8], [1,9], [1,10],
                   [2,3], [2,4], [2,5], [2,6], [2,7], [2,8], [2,9], [2,10],
                   [3,4], [3,5], [3,6], [3,7], [3,8], [3,9], [3,10],
                   [4,5], [4,6], [4,7], [4,8], [4,9], [4,10],
                   [5,6], [5,7], [5,8], [5,9], [5,10],
                   [6,7], [6,8], [6,9], [6,10],
                   [7,8], [7,9], [7,10],
                   [8,9], [8,10],
                   [9,10],  ]   

     v = {1: {2: [ np.array([-1,  1, 0, 0, 0, 0, 0, 0, 0, 0]) ],
             3: [ np.array([-1,  0, 1, 0, 0, 0, 0, 0, 0, 0]) ],
             4: [ np.array([-1,  0, 0, 1, 0, 0, 0, 0, 0, 0]) ],
             5: [ np.array([-1,  0, 0, 0, 1, 0, 0, 0, 0, 0]) ],
             6: [ np.array([-1,  0, 0, 0, 0, 1, 0, 0, 0, 0]) ],
             7: [ np.array([-1,  0, 0, 0, 0, 0, 1, 0, 0, 0]) ],
             8: [ np.array([-1,  0, 0, 0, 0, 0, 0, 1, 0, 0]) ],
             9: [ np.array([-1,  0, 0, 0, 0, 0, 0, 0, 1, 0]) ],
             10:[ np.array([-1,  0, 0, 0, 0, 0, 0, 0, 0, 1]) ] },

        2: { 3: [ np.array([0,  -1, 1, 0, 0, 0, 0, 0, 0, 0]) ],
             4: [ np.array([0,  -1, 0, 1, 0, 0, 0, 0, 0, 0]) ],
             5: [ np.array([0,  -1, 0, 0, 1, 0, 0, 0, 0, 0]) ],
             6: [ np.array([0,  -1, 0, 0, 0, 1, 0, 0, 0, 0]) ],
             7: [ np.array([0,  -1, 0, 0, 0, 0, 1, 0, 0, 0]) ],
             8: [ np.array([0,  -1, 0, 0, 0, 0, 0, 1, 0, 0]) ],
             9: [ np.array([0,  -1, 0, 0, 0, 0, 0, 0, 1, 0]) ],
             10:[ np.array([0,  -1, 0, 0, 0, 0, 0, 0, 0, 1]) ] },

        3: { 4: [ np.array([0,  0, -1, 1, 0, 0, 0, 0, 0, 0]) ],
             5: [ np.array([0,  0, -1, 0, 1, 0, 0, 0, 0, 0]) ],
             6: [ np.array([0,  0, -1, 0, 0, 1, 0, 0, 0, 0]) ],
             7: [ np.array([0,  0, -1, 0, 0, 0, 1, 0, 0, 0]) ],
             8: [ np.array([0,  0, -1, 0, 0, 0, 0, 1, 0, 0]) ],
             9: [ np.array([0,  0, -1, 0, 0, 0, 0, 0, 1, 0]) ],
             10:[ np.array([0,  0, -1, 0, 0, 0, 0, 0, 0, 1]) ] },

        4: { 5: [ np.array([0,  0, 0, -1, 1, 0, 0, 0, 0, 0]) ],
             6: [ np.array([0,  0, 0, -1, 0, 1, 0, 0, 0, 0]) ],
             7: [ np.array([0,  0, 0, -1, 0, 0, 1, 0, 0, 0]) ],
             8: [ np.array([0,  0, 0, -1, 0, 0, 0, 1,  0, 0]) ],
             9: [ np.array([0,  0, 0, -1, 0, 0, 0, 0, 1, 0]) ],
             10:[ np.array([0,  0, 0, -1, 0, 0, 0, 0, 0, 1]) ] },

        5: { 6: [ np.array([0,  0, 0, 0, -1, 1, 0, 0, 0, 0]) ],
             7: [ np.array([0,  0, 0, 0, -1, 0, 1, 0, 0, 0]) ],
             8: [ np.array([0,  0, 0, 0, -1, 0, 0, 1, 0, 0]) ],
             9: [ np.array([0,  0, 0, 0, -1, 0, 0, 0, 1, 0]) ],
             10:[ np.array([0,  0, 0, 0, -1, 0, 0, 0, 0, 1]) ] },

        6: { 7: [ np.array([0,  0, 0, 0, 0, -1, 1, 0, 0, 0]) ],
             8: [ np.array([0,  0, 0, 0, 0, -1, 0, 1, 0, 0]) ],
             9: [ np.array([0,  0, 0, 0, 0, -1, 0, 0, 1, 0]) ],
             10:[ np.array([0,  0, 0, 0, 0, -1, 0, 0, 0, 1]) ] },

        7: { 8: [ np.array([0,  0, 0, 0, 0, 0, -1, 1, 0, 0]) ],
             9: [ np.array([0,  0, 0, 0, 0, 0, -1, 0, 1, 0]) ],
             10:[ np.array([0, 0, 0, 0, 0, 0,  -1, 0, 0, 1]) ] },

        8: { 9: [ np.array([0,  0, 0, 0, 0, 0, 0, -1, 1, 0]) ],
             10:[ np.array([0, 0, 0, 0, 0, 0, 0,  -1,  0, 1]) ] },

        9: { 10:[ np.array([0, 0, 0, 0, 0, 0, 0, 0, -1, 1]) ] },  } 
    
     N_plus =  collections.defaultdict(dict)
     N_plus[1][2] = [ 1, 2 ]
     N_plus[1][3] = [ 1, 3 ]
     N_plus[1][4] = [ 1, 4 ]
     N_plus[1][5] = [ 1, 5 ]
     N_plus[1][6] = [ 1, 6 ]
     N_plus[1][7] = [ 1, 7 ]
     N_plus[1][8] = [ 1, 8 ]
     N_plus[1][9] = [ 1, 9 ]
     N_plus[1][10] = [1, 10 ]
 
     N_plus[2][3] = [ 2, 3 ]
     N_plus[2][4] = [ 2, 4 ]
     N_plus[2][5] = [ 2, 5 ]
     N_plus[2][6] = [ 2, 6 ]
     N_plus[2][7] = [ 2, 7 ]
     N_plus[2][8] = [ 2, 8 ]
     N_plus[2][9] = [ 2, 9 ]
     N_plus[2][10] = [2, 10 ]

     N_plus[3][4] = [ 3, 4 ]
     N_plus[3][5] = [ 3, 5 ]
     N_plus[3][6] = [ 3, 6 ]
     N_plus[3][7] = [ 3, 7 ]
     N_plus[3][8] = [ 3, 8 ]
     N_plus[3][9] = [ 3, 9 ]
     N_plus[3][10] = [3, 10]
 
     N_plus[4][5] = [ 4, 5 ]
     N_plus[4][6] = [ 4, 6 ]
     N_plus[4][7] = [ 4, 7 ]
     N_plus[4][8] = [ 4, 8 ]
     N_plus[4][9] = [ 4, 9 ]
     N_plus[4][10] = [4, 10 ]
 
     N_plus[5][6] = [ 5, 6 ]
     N_plus[5][7] = [ 5, 7 ]
     N_plus[5][8] = [ 5, 8 ]
     N_plus[5][9] = [ 5, 9 ]
     N_plus[5][10] = [5, 10 ]
 
     N_plus[6][7] = [ 6, 7 ]
     N_plus[6][8] = [ 6, 8 ]
     N_plus[6][9] = [ 6, 9 ]
     N_plus[6][10] = [6, 10 ]
 
     N_plus[7][8] = [ 7, 8 ]
     N_plus[7][9] = [ 7, 9 ]
     N_plus[7][10] = [7, 10 ]
 
     N_plus[8][9] = [ 8, 9 ]
     N_plus[8][10] = [8, 10 ]
 
     N_plus[9][10] = [ 9, 10 ]
 
     V = collections.defaultdict(dict)
     V[1][2] = [ 0,  ] 
     V[1][3] = [ 0, ]  
     V[1][4] = [ 0, ]  
     V[1][5] = [ 0, ]  
     V[1][6] = [ 0, ]  
     V[1][7] = [ 0, ] 
     V[1][8] = [ 0, ]  
     V[1][9] = [ 0, ]  
     V[1][10] = [0, ]  
 
     V[2][3] = [ 0, ]
     V[2][4] = [ 0, ]
     V[2][5] = [ 0, ]
     V[2][6] = [ 0, ]
     V[2][7] = [ 0, ]
     V[2][8] = [ 0, ]
     V[2][9] = [ 0, ]
     V[2][10] = [0,  ]
 
     V[3][4] = [ 0, ]
     V[3][5] = [ 0, ]
     V[3][6] = [ 0, ]
     V[3][7] = [ 0, ]
     V[3][8] = [ 0, ]
     V[3][9] = [ 0, ]
     V[3][10] = [0,  ]

     V[4][5] = [ 0, ]
     V[4][6] = [ 0, ]
     V[4][7] = [ 0, ]
     V[4][8] = [ 0, ]
     V[4][9] = [ 0, ]
     V[4][10] = [0,  ]
 
     V[5][6] = [ 0, ]
     V[5][7] = [ 0, ]
     V[5][8] = [ 0, ]
     V[5][9] = [ 0, ]
     V[5][10] = [0,  ]
 
     V[6][7] = [ 0, ]
     V[6][8] = [ 0, ]
     V[6][9] = [ 0, ]
     V[6][10] = [0,  ]
 
     V[7][8] = [ 0, ]
     V[7][9] = [ 0, ]
     V[7][10] = [0,  ]
 
     V[8][9] = [ 0, ]
     V[8][10] = [0,  ]
 
     V[9][10] = [ 0,  ]

     informative_symbols = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9,]

     return Game( name, informative_symbols,  noise, LossMatrix, FeedbackMatrix, signal_matrices, mathcal_N, v, N_plus, V )







def game_case4(  noise ):
    name = 'case4'
    LossMatrix = np.array( [ [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                             [0, 1/2, 1/2, 1/2, 1/2, 1/2, 1/2, 1/2, 1/2, 1/2],
                             [1/2, 0, 1/2, 1/2, 1/2, 1/2, 1/2, 1, 1/2, 1/2],
                             [1/2, 1/2, 0, 1/2, 1/2, 1/2, 1/2, 1/2, 1/2, 1/2],
                             [1/2, 1/2, 1/2, 0, 1/2, 1/2, 1/2, 1/2, 1, 1/2],
                             [1/2, 1/2, 1/2, 1/2, 0, 1/2, 1/2, 1/2, 1/2, 1],
                             [1/2, 1/2, 1/2, 1/2, 1/2, 0, 1, 1/2, 1/2, 1/2],
                             [1/2, 1/2, 1/2, 1/2, 1/2, 1, 0, 1/2, 1/2, 1/2],
                             [1, 1/2, 1/2, 1/2, 1/2, 1/2, 1/2, 0, 1/2, 1/2],
                             [1/2, 1/2, 1/2, 1, 1/2, 1/2, 1/2, 1/2, 0, 1/2],
                             [1/2, 1/2, 1/2, 1/2, 1, 1/2, 1/2, 1/2, 1/2, 0] ] )
    
    FeedbackMatrix = np.array(  [ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 
                                  [10] * 10, 
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10 ] )
    
    signal_matrices = [ np.array( [ [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                                    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                                    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                                    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                                    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1] ] ), 

                                    np.array( [ [1]*10 ] ), 
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] )  ] 
    
    mathcal_N = [  [1,2], [1,3], [1,4], [1,5], [1,6], [1,7], [1,8], [1,9], [1,10],
                   [2,3], [2,4], [2,5], [2,6], [2,7], [2,8], [2,9], [2,10],
                   [3,4], [3,5], [3,6], [3,7], [3,8], [3,9], [3,10],
                   [4,5], [4,6], [4,7], [4,8], [4,9], [4,10],
                   [5,6], [5,7], [5,8], [5,9], [5,10],
                   [6,7], [6,8], [6,9], [6,10],
                   [7,8], [7,9], [7,10],
                   [8,9], [8,10],
                   [9,10],  ]   


    v = {1: {2: [ np.array([-0.5,  0.5,  0,   0,   0,   0,   0,  -0.5,  0,  0. ]) ],
             3: [ np.array([-0.5,  0.,   0.5,  0. ,  0. ,  0. ,  0. ,  0.  , 0. ,  0. ]) ],
             4: [ np.array([-0.5,  0,   0,   0.5,  0,   0,   0,   0,  -0.5,  0. ]) ],
             5: [ np.array([-0.5,  0,   0,   0,   0.5,  0,   0,   0,   0,  -0.5]) ],
             6: [ np.array([-0.5,  0,   0,   0,   0,   0.5, -0.5,  0,   0,   0 ]) ],
             7: [ np.array([-0.5,  0,   0,   0,   0,  -0.5,  0.5,  0,   0,   0 ]) ],
             8: [ np.array([-1,   0,   0,   0,  0,   0,  0,   0.5,  0,  0 ]) ],
             9: [ np.array([-0.5,  0,   0,  -0.5,  0,   0,   0,   0,   0.5,  0 ]) ],
             10:[ np.array([-0.5,  0,   0,   0,  -0.5,  0,   0,  0,  0,  0.5]) ] },

        2: { 3: [ np.array([ 0,  -0.5,  0.5,  0,  0,  0,  0,  0.5,  0,   0 ]) ],
             4: [ np.array([ 0,  -0.5,  0,  0.5,  0,  0,  0,  0.5, -0.5,  0 ]) ],
             5: [ np.array([ 0,  -0.5,  0,  0,   0.5,  0,  0,   0.5,  0,  -0.5]) ],
             6: [ np.array([ 0,  -0.5,  0,   0,   0,   0.5, -0.5,  0.5,  0,  0 ]) ],
             7: [ np.array([ 0,  -0.5,  0,   0,   0,  -0.5,  0.5,  0.5,  0,   0 ]) ],
             8: [ np.array([-0.5, -0.5,  0,   0,   0,   0,   0,  1,   0,   0 ]) ],
             9: [ np.array([ 0,  -0.5,  0,  -0.5,  0,  0,  0,  0.5,  0.5,  0 ]) ],
             10:[ np.array([ 0,  -0.5, 0,  0, -0.5,  0,  0,  0.5,  0,  0.5]) ] },

        3: { 4: [ np.array([ 0,   0,  -0.5,  0.5,  0,   0,   0,   0,  -0.5,  0 ]) ],
             5: [ np.array([ 0,   0,  -0.5,  0,   0.5,  0,   0,   0,   0,  -0.5]) ],
             6: [ np.array([ 0,   0,  -0.5,  0,   0,   0.5, -0.5,  0,   0,   0 ]) ],
             7: [ np.array([ 0,  0,  -0.5,  0,   0,  -0.5,  0.5,  0,   0,   0 ]) ],
             8: [ np.array([-0.5,  0,  -0.5,  0,   0,   0,   0,   0.5,  0,   0 ]) ],
             9: [ np.array([ 0,   0,  -0.5, -0.5,  0,   0,   0,   0,   0.5,  0 ]) ],
             10:[ np.array([ 0,   0,  -0.5,  0,  -0.5,  0,   0,   0,   0,  0.5]) ] },

        4: { 5: [ np.array([ 0,   0,  0,  -0.5,  0.5,  0,   0,   0,   0.5, -0.5]) ],
             6: [ np.array([ 0,   0,   0,  -0.5,  0,   0.5, -0.5,  0,   0.5,  0 ]) ],
             7: [ np.array([ 0,   0,   0,  -0.5,  0,  -0.5,  0.5,  0, 0.5,  0 ]) ],
             8: [ np.array([-0.5,  0,   0,  -0.5,  0,   0,   0,   0.5,  0.5,  0 ]) ],
             9: [ np.array([ 0,  0,  0, -1,  0,  0,  0,  0,  1,  0]) ],
             10:[ np.array([ 0,   0,   0,  -0.5, -0.5,  0,   0,   0,   0.5,  0.5]) ] },

        5: { 6: [ np.array([ 0,   0,   0,   0,  -0.5,  0.5, -0.5,  0,   0,   0.5]) ],
             7: [ np.array([ 0,   0,   0,   0,  -0.5, -0.5,  0.5,  0,   0,   0.5]) ],
             8: [ np.array([-0.5,  0,   0,   0,  -0.5,  0,   0,   0.5,  0,   0.5]) ],
             9: [ np.array([ 0,   0,   0,  -0.5, -0.5,  0,   0,   0. ,  0.5,  0.5]) ],
             10:[ np.array([ 0,  0,  0,  0, -1,  0,  0,  0,  0,  1]) ] },

        6: { 7: [ np.array([ 0,  0,  0,  0,  0, -1,  1,  0,  0,  0]) ],
             8: [ np.array([-0.5,  0,   0,   0,   0,  -0.5,  0.5,  0.5,  0,   0 ]) ],
             9: [ np.array([ 0,   0,   0,  -0.5,  0,  -0.5,  0.5,  0,   0.5, 0 ]) ],
             10:[ np.array([ 0,   0,   0,   0,  -0.5, -0.5,  0.5,  0,   0,   0.5]) ] },

        7: { 8: [ np.array([-0.5, 0,   0,   0,   0,   0.5, -0.5,  0.5,  0,   0 ]) ],
             9: [ np.array([ 0,   0,   0,  -0.5,  0,   0.5, -0.5,  0,   0.5,  0 ]) ],
             10:[ np.array([ 0,   0,   0,   0,  -0.5,  0.5, -0.5,  0,   0,   0.5]) ] },

        8: { 9: [ np.array([ 0.5,  0,   0,  -0.5,  0,   0,   0,  -0.5,  0.5,  0 ]) ],
             10:[ np.array([ 0.5,  0,   0,   0,  -0.5,  0,   0,  -0.5,  0,   0.5]) ] },

        9: { 10:[ np.array([ 0,   0,   0,  0.5, -0.5,  0,   0,   0,  -0.5,  0.5]) ] },  } 
    
    N_plus =  collections.defaultdict(dict)
    N_plus[1][2] = [ 1, 2 ]
    N_plus[1][3] = [ 1, 3 ]
    N_plus[1][4] = [ 1, 4 ]
    N_plus[1][5] = [ 1, 5 ]
    N_plus[1][6] = [ 1, 6 ]
    N_plus[1][7] = [ 1, 7 ]
    N_plus[1][8] = [ 1, 8 ]
    N_plus[1][9] = [ 1, 9 ]
    N_plus[1][10] = [1, 10 ]

    N_plus[2][3] = [ 2, 3 ]
    N_plus[2][4] = [ 2, 4 ]
    N_plus[2][5] = [ 2, 5 ]
    N_plus[2][6] = [ 2, 6 ]
    N_plus[2][7] = [ 2, 7 ]
    N_plus[2][8] = [ 2, 8 ]
    N_plus[2][9] = [ 2, 9 ]
    N_plus[2][10] = [2, 10 ]

    N_plus[3][4] = [ 3, 4 ]
    N_plus[3][5] = [ 3, 5 ]
    N_plus[3][6] = [ 3, 6 ]
    N_plus[3][7] = [ 3, 7 ]
    N_plus[3][8] = [ 3, 8 ]
    N_plus[3][9] = [ 3, 9 ]
    N_plus[3][10] = [3, 10]

    N_plus[4][5] = [ 4, 5 ]
    N_plus[4][6] = [ 4, 6 ]
    N_plus[4][7] = [ 4, 7 ]
    N_plus[4][8] = [ 4, 8 ]
    N_plus[4][9] = [ 4, 9 ]
    N_plus[4][10] = [4, 10 ]

    N_plus[5][6] = [ 5, 6 ]
    N_plus[5][7] = [ 5, 7 ]
    N_plus[5][8] = [ 5, 8 ]
    N_plus[5][9] = [ 5, 9 ]
    N_plus[5][10] = [5, 10 ]

    N_plus[6][7] = [ 6, 7 ]
    N_plus[6][8] = [ 6, 8 ]
    N_plus[6][9] = [ 6, 9 ]
    N_plus[6][10] = [6, 10 ]

    N_plus[7][8] = [ 7, 8 ]
    N_plus[7][9] = [ 7, 9 ]
    N_plus[7][10] = [7, 10 ]

    N_plus[8][9] = [ 8, 9 ]
    N_plus[8][10] = [8, 10 ]

    N_plus[9][10] = [ 9, 10 ]

    V = collections.defaultdict(dict)
    V[1][2] = [ 0,  ] 
    V[1][3] = [ 0, ]  
    V[1][4] = [ 0, ]  
    V[1][5] = [ 0, ]  
    V[1][6] = [ 0, ]  
    V[1][7] = [ 0, ] 
    V[1][8] = [ 0, ]  
    V[1][9] = [ 0, ]  
    V[1][10] = [0, ]  

    V[2][3] = [ 0, ]
    V[2][4] = [ 0, ]
    V[2][5] = [ 0, ]
    V[2][6] = [ 0, ]
    V[2][7] = [ 0, ]
    V[2][8] = [ 0, ]
    V[2][9] = [ 0, ]
    V[2][10] = [0,  ]

    V[3][4] = [ 0, ]
    V[3][5] = [ 0, ]
    V[3][6] = [ 0, ]
    V[3][7] = [ 0, ]
    V[3][8] = [ 0, ]
    V[3][9] = [ 0, ]
    V[3][10] = [0,  ]

    V[4][5] = [ 0, ]
    V[4][6] = [ 0, ]
    V[4][7] = [ 0, ]
    V[4][8] = [ 0, ]
    V[4][9] = [ 0, ]
    V[4][10] = [0,  ]

    V[5][6] = [ 0, ]
    V[5][7] = [ 0, ]
    V[5][8] = [ 0, ]
    V[5][9] = [ 0, ]
    V[5][10] = [0,  ]

    V[6][7] = [ 0, ]
    V[6][8] = [ 0, ]
    V[6][9] = [ 0, ]
    V[6][10] = [0,  ]

    V[7][8] = [ 0, ]
    V[7][9] = [ 0, ]
    V[7][10] = [0,  ]

    V[8][9] = [ 0, ]
    V[8][10] = [0,  ]

    V[9][10] = [ 0,  ]

    informative_symbols = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9,]

    return Game( name, informative_symbols,  noise, LossMatrix, FeedbackMatrix, signal_matrices, mathcal_N, v, N_plus, V )








def game_case4b(  noise ):
    name = 'case4b'
    LossMatrix = np.array( [ [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                             [0, 1/2, 1/2, 1/2, 1/2, 1/2, 1/2, 1/2, 1/2, 1/2],
                             [1/2, 0, 1/2, 1/2, 1/2, 1/2, 1/2, 1, 1/2, 1/2],
                             [1/2, 1/2, 0, 1/2, 1/2, 1/2, 1/2, 1/2, 1/2, 1/2],
                             [1/2, 1/2, 1/2, 0, 1/2, 1/2, 1/2, 1/2, 1, 1/2],
                             [1/2, 1/2, 1/2, 1/2, 0, 1/2, 1/2, 1/2, 1/2, 1],
                             [1/2, 1/2, 1/2, 1/2, 1/2, 0, 1, 1/2, 1/2, 1/2],
                             [1/2, 1/2, 1/2, 1/2, 1/2, 1, 0, 1/2, 1/2, 1/2],
                             [1, 1, 1, 1, 1, 1, 1, 0, 1, 1],
                             [1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
                             [1, 1, 1, 1, 1, 1, 1, 1, 1, 0] ] )
    
    FeedbackMatrix = np.array(  [ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 
                                  [10] * 10, 
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10 ] )
    
    signal_matrices = [ np.array( [ [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                                    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                                    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                                    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                                    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1] ] ), 

                                    np.array( [ [1]*10 ] ), 
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] )  ] 
    
    mathcal_N = [  [1,2], [1,3], [1,4], [1,5], [1,6], [1,7], [1,8], [1,9], [1,10],
                   [2,3], [2,4], [2,5], [2,6], [2,7], [2,8], [2,9], [2,10],
                   [3,4], [3,5], [3,6], [3,7], [3,8], [3,9], [3,10],
                   [4,5], [4,6], [4,7], [4,8], [4,9], [4,10],
                   [5,6], [5,7], [5,8], [5,9], [5,10],
                   [6,7], [6,8], [6,9], [6,10],
                   [7,8], [7,9], [7,10],
                   [8,9], [8,10],
                   [9,10],  ]   


    v = {1: {2: [ np.array([-0.5,  0.5,  0,   0,   0,   0,   0,  -0.5,  0,  0. ]) ],
             3: [ np.array([-0.5,  0.,   0.5,  0. ,  0. ,  0. ,  0. ,  0.  , 0. ,  0. ]) ],
             4: [ np.array([-0.5,  0,   0,   0.5,  0,   0,   0,   0,  -0.5,  0. ]) ],
             5: [ np.array([-0.5,  0,   0,   0,   0.5,  0,   0,   0,   0,  -0.5]) ],
             6: [ np.array([-0.5,  0,   0,   0,   0,   0.5, -0.5,  0,   0,   0 ]) ],
             7: [ np.array([-0.5,  0,   0,   0,   0,  -0.5,  0.5,  0,   0,   0 ]) ],
             8: [ np.array([-1. , -0.5, -0.5, -0.5, -0.5, -0.5, -0.5,  0.5, -0.5, -0.5]) ],
             9: [ np.array([-1. , -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5,  0.5, -0.5]) ],
             10:[ np.array([-1. , -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5,  0.5]) ] },

        2: { 3: [ np.array([ 0,  -0.5,  0.5,  0,  0,  0,  0,  0.5,  0,   0 ]) ],
             4: [ np.array([ 0,  -0.5,  0,  0.5,  0,  0,  0,  0.5, -0.5,  0 ]) ],
             5: [ np.array([ 0,  -0.5,  0,  0,   0.5,  0,  0,   0.5,  0,  -0.5]) ],
             6: [ np.array([ 0,  -0.5,  0,   0,   0,   0.5, -0.5,  0.5,  0,  0 ]) ],
             7: [ np.array([ 0,  -0.5,  0,   0,   0,  -0.5,  0.5,  0.5,  0,   0 ]) ],
             8: [ np.array([-0.5, -1. , -0.5, -0.5, -0.5, -0.5, -0.5,  1. , -0.5, -0.5]) ],
             9: [ np.array([-0.5, -1. , -0.5, -0.5, -0.5, -0.5, -0.5,  0. ,  0.5, -0.5]) ],
             10:[ np.array([-0.5, -1. , -0.5, -0.5, -0.5, -0.5, -0.5,  0. , -0.5,  0.5]) ] },

        3: { 4: [ np.array([ 0,   0,  -0.5,  0.5,  0,   0,   0,   0,  -0.5,  0 ]) ],
             5: [ np.array([ 0,   0,  -0.5,  0,   0.5,  0,   0,   0,   0,  -0.5]) ],
             6: [ np.array([ 0,   0,  -0.5,  0,   0,   0.5, -0.5,  0,   0,   0 ]) ],
             7: [ np.array([ 0,  0,  -0.5,  0,   0,  -0.5,  0.5,  0,   0,   0 ]) ],
             8: [ np.array([-0.5, -0.5, -1. , -0.5, -0.5, -0.5, -0.5,  0.5, -0.5, -0.5]) ],
             9: [ np.array([-0.5, -0.5, -1. , -0.5, -0.5, -0.5, -0.5, -0.5,  0.5, -0.5]) ],
             10:[ np.array([-0.5, -0.5, -1. , -0.5, -0.5, -0.5, -0.5, -0.5, -0.5,  0.5]) ] },

        4: { 5: [ np.array([ 0,   0,  0,  -0.5,  0.5,  0,   0,   0,   0.5, -0.5]) ],
             6: [ np.array([ 0,   0,   0,  -0.5,  0,   0.5, -0.5,  0,   0.5,  0 ]) ],
             7: [ np.array([ 0,   0,   0,  -0.5,  0,  -0.5,  0.5,  0, 0.5,  0 ]) ],
             8: [ np.array([-0.5, -0.5, -0.5, -1. , -0.5, -0.5, -0.5,  0.5,  0. , -0.5]) ],
             9: [ np.array([-0.5, -0.5, -0.5, -1. , -0.5, -0.5, -0.5, -0.5,  1. , -0.5]) ],
             10:[ np.array([-0.5, -0.5, -0.5, -1. , -0.5, -0.5, -0.5, -0.5,  0. ,  0.5]) ] },

        5: { 6: [ np.array([ 0,   0,   0,   0,  -0.5,  0.5, -0.5,  0,   0,   0.5]) ],
             7: [ np.array([ 0,   0,   0,   0,  -0.5, -0.5,  0.5,  0,   0,   0.5]) ],
             8: [ np.array([-0.5, -0.5, -0.5, -0.5, -1. , -0.5, -0.5,  0.5, -0.5,  0. ]) ],
             9: [ np.array([-0.5, -0.5, -0.5, -0.5, -1. , -0.5, -0.5, -0.5,  0.5,  0. ]) ],
             10:[ np.array([-0.5, -0.5, -0.5, -0.5, -1. , -0.5, -0.5, -0.5, -0.5,  1. ]) ] },

        6: { 7: [ np.array([ 0,  0,  0,  0,  0, -1,  1,  0,  0,  0]) ],
             8: [ np.array([-0.5, -0.5, -0.5, -0.5, -0.5, -1. ,  0. ,  0.5, -0.5, -0.5]) ],
             9: [ np.array([-0.5, -0.5, -0.5, -0.5, -0.5, -1. ,  0. , -0.5,  0.5, -0.5]) ],
             10:[ np.array([-0.5, -0.5, -0.5, -0.5, -0.5, -1. ,  0. , -0.5, -0.5,  0.5]) ] },

        7: { 8: [ np.array([-0.5, -0.5, -0.5, -0.5, -0.5,  0. , -1. ,  0.5, -0.5, -0.5]) ],
             9: [ np.array([-0.5, -0.5, -0.5, -0.5, -0.5,  0. , -1. , -0.5,  0.5, -0.5]) ],
             10:[ np.array([-0.5, -0.5, -0.5, -0.5, -0.5,  0. , -1. , -0.5, -0.5,  0.5]) ] },

        8: { 9: [ np.array([ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.,  0.]) ],
             10:[ np.array([ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.]) ] },

        9: { 10:[ np.array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.]) ] },  } 
    
    N_plus =  collections.defaultdict(dict)
    N_plus[1][2] = [ 1, 2 ]
    N_plus[1][3] = [ 1, 3 ]
    N_plus[1][4] = [ 1, 4 ]
    N_plus[1][5] = [ 1, 5 ]
    N_plus[1][6] = [ 1, 6 ]
    N_plus[1][7] = [ 1, 7 ]
    N_plus[1][8] = [ 1, 8 ]
    N_plus[1][9] = [ 1, 9 ]
    N_plus[1][10] = [1, 10 ]

    N_plus[2][3] = [ 2, 3 ]
    N_plus[2][4] = [ 2, 4 ]
    N_plus[2][5] = [ 2, 5 ]
    N_plus[2][6] = [ 2, 6 ]
    N_plus[2][7] = [ 2, 7 ]
    N_plus[2][8] = [ 2, 8 ]
    N_plus[2][9] = [ 2, 9 ]
    N_plus[2][10] = [2, 10 ]

    N_plus[3][4] = [ 3, 4 ]
    N_plus[3][5] = [ 3, 5 ]
    N_plus[3][6] = [ 3, 6 ]
    N_plus[3][7] = [ 3, 7 ]
    N_plus[3][8] = [ 3, 8 ]
    N_plus[3][9] = [ 3, 9 ]
    N_plus[3][10] = [3, 10]

    N_plus[4][5] = [ 4, 5 ]
    N_plus[4][6] = [ 4, 6 ]
    N_plus[4][7] = [ 4, 7 ]
    N_plus[4][8] = [ 4, 8 ]
    N_plus[4][9] = [ 4, 9 ]
    N_plus[4][10] = [4, 10 ]

    N_plus[5][6] = [ 5, 6 ]
    N_plus[5][7] = [ 5, 7 ]
    N_plus[5][8] = [ 5, 8 ]
    N_plus[5][9] = [ 5, 9 ]
    N_plus[5][10] = [5, 10 ]

    N_plus[6][7] = [ 6, 7 ]
    N_plus[6][8] = [ 6, 8 ]
    N_plus[6][9] = [ 6, 9 ]
    N_plus[6][10] = [6, 10 ]

    N_plus[7][8] = [ 7, 8 ]
    N_plus[7][9] = [ 7, 9 ]
    N_plus[7][10] = [7, 10 ]

    N_plus[8][9] = [ 8, 9 ]
    N_plus[8][10] = [8, 10 ]

    N_plus[9][10] = [ 9, 10 ]

    V = collections.defaultdict(dict)
    V[1][2] = [ 0,  ] 
    V[1][3] = [ 0, ]  
    V[1][4] = [ 0, ]  
    V[1][5] = [ 0, ]  
    V[1][6] = [ 0, ]  
    V[1][7] = [ 0, ] 
    V[1][8] = [ 0, ]  
    V[1][9] = [ 0, ]  
    V[1][10] = [0, ]  

    V[2][3] = [ 0, ]
    V[2][4] = [ 0, ]
    V[2][5] = [ 0, ]
    V[2][6] = [ 0, ]
    V[2][7] = [ 0, ]
    V[2][8] = [ 0, ]
    V[2][9] = [ 0, ]
    V[2][10] = [0,  ]

    V[3][4] = [ 0, ]
    V[3][5] = [ 0, ]
    V[3][6] = [ 0, ]
    V[3][7] = [ 0, ]
    V[3][8] = [ 0, ]
    V[3][9] = [ 0, ]
    V[3][10] = [0,  ]

    V[4][5] = [ 0, ]
    V[4][6] = [ 0, ]
    V[4][7] = [ 0, ]
    V[4][8] = [ 0, ]
    V[4][9] = [ 0, ]
    V[4][10] = [0,  ]

    V[5][6] = [ 0, ]
    V[5][7] = [ 0, ]
    V[5][8] = [ 0, ]
    V[5][9] = [ 0, ]
    V[5][10] = [0,  ]

    V[6][7] = [ 0, ]
    V[6][8] = [ 0, ]
    V[6][9] = [ 0, ]
    V[6][10] = [0,  ]

    V[7][8] = [ 0, ]
    V[7][9] = [ 0, ]
    V[7][10] = [0,  ]

    V[8][9] = [ 0, ]
    V[8][10] = [0,  ]

    V[9][10] = [ 0,  ]

    informative_symbols = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9,]

    return Game( name, informative_symbols,  noise, LossMatrix, FeedbackMatrix, signal_matrices, mathcal_N, v, N_plus, V )







def game_case5( noise ):

    name = 'case5'
    LossMatrix = np.array( [ [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                             [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                             [0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                             [1, 0, 1, 1, 1, 1, 1, 1, 1, 1],
                             [1, 1, 0, 1, 1, 1, 1, 1, 1, 1],
                             [1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
                             [1, 1, 1, 1, 0, 1, 1, 1, 1, 1],
                             [1, 1, 1, 1, 1, 0, 1, 1, 1, 1],
                             [1, 1, 1, 1, 1, 1, 0, 1, 1, 1],
                             [1, 1, 1, 1, 1, 1, 1, 0, 1, 1],
                             [1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
                             [1, 1, 1, 1, 1, 1, 1, 1, 1, 0] ] )
    
    FeedbackMatrix = np.array(  [ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 
                                  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 
                                  [10] * 10, 
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10,
                                  [10] * 10 ] )

    signal_matrices = [ np.array( [ [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                                    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                                    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                                    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                                    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1] ] ), 

                         np.array( [ [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                                    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                                    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                                    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                                    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1] ] ), 

                                    np.array( [ [1]*10 ] ), 
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] ),
                                    np.array( [ [1]*10 ] )  ] 

    
    mathcal_N = [  [2,3], [2,4], [2,5], [2,6], [2,7], [2,8], [2,9], [2,10], [2,11],
                   [3,4], [3,5], [3,6], [3,7], [3,8], [3,9], [3,10], [3,11],
                   [4,5], [4,6], [4,7], [4,8], [4,9], [4,10], [4,11],
                   [5,6], [5,7], [5,8], [5,9], [5,10], [5,11],
                   [6,7], [6,8], [6,9], [6,10], [6,11],
                   [7,8], [7,9], [7,10], [7,11],
                   [8,9], [8,10], [8,11],
                   [9,10], [9,11],
                   [10,11],  ]   

    v = {2: {3: [ np.array([-1,  1, 0, 0, 0, 0, 0, 0, 0, 0]) ]*2,
             4: [ np.array([-1,  0, 1, 0, 0, 0, 0, 0, 0, 0]) ]*2,
             5: [ np.array([-1,  0, 0, 1, 0, 0, 0, 0, 0, 0]) ]*2,
             6: [ np.array([-1,  0, 0, 0, 1, 0, 0, 0, 0, 0]) ]*2,
             7: [ np.array([-1,  0, 0, 0, 0, 1, 0, 0, 0, 0]) ]*2,
             8: [ np.array([-1,  0, 0, 0, 0, 0, 1, 0, 0, 0]) ]*2,
             9: [ np.array([-1,  0, 0, 0, 0, 0, 0, 1, 0, 0]) ]*2,
             10: [ np.array([-1,  0, 0, 0, 0, 0, 0, 0, 1, 0]) ]*2,
             11:[ np.array([-1,  0, 0, 0, 0, 0, 0, 0, 0, 1]) ]*2 },

        3: { 4: [ np.array([0,  -1, 1, 0, 0, 0, 0, 0, 0, 0]) ]*2,
             5: [ np.array([0,  -1, 0, 1, 0, 0, 0, 0, 0, 0]) ]*2,
             6: [ np.array([0,  -1, 0, 0, 1, 0, 0, 0, 0, 0]) ]*2,
             7: [ np.array([0,  -1, 0, 0, 0, 1, 0, 0, 0, 0]) ]*2,
             8: [ np.array([0,  -1, 0, 0, 0, 0, 1, 0, 0, 0]) ]*2,
             9: [ np.array([0,  -1, 0, 0, 0, 0, 0, 1, 0, 0]) ]*2,
             10: [ np.array([0,  -1, 0, 0, 0, 0, 0, 0, 1, 0]) ]*2,
             11:[ np.array([0,  -1, 0, 0, 0, 0, 0, 0, 0, 1]) ]*2 },

        4: { 5: [ np.array([0,  0, -1, 1, 0, 0, 0, 0, 0, 0]) ]*2,
             6: [ np.array([0,  0, -1, 0, 1, 0, 0, 0, 0, 0]) ]*2,
             7: [ np.array([0,  0, -1, 0, 0, 1, 0, 0, 0, 0]) ]*2,
             8: [ np.array([0,  0, -1, 0, 0, 0, 1, 0, 0, 0]) ]*2,
             9: [ np.array([0,  0, -1, 0, 0, 0, 0, 1, 0, 0]) ]*2,
             10: [ np.array([0,  0, -1, 0, 0, 0, 0, 0, 1, 0]) ]*2,
             11:[ np.array([0,  0, -1, 0, 0, 0, 0, 0, 0, 1]) ]*2 },

        5: { 6: [ np.array([0,  0, 0, -1, 1, 0, 0, 0, 0, 0]) ]*2,
             7: [ np.array([0,  0, 0, -1, 0, 1, 0, 0, 0, 0]) ]*2,
             8: [ np.array([0,  0, 0, -1, 0, 0, 1, 0, 0, 0]) ]*2,
             9: [ np.array([0,  0, 0, -1, 0, 0, 0, 1,  0, 0]) ]*2,
             10: [ np.array([0,  0, 0, -1, 0, 0, 0, 0, 1, 0]) ]*2,
             11:[ np.array([0,  0, 0, -1, 0, 0, 0, 0, 0, 1]) ]*2 },

        6: { 7: [ np.array([0,  0, 0, 0, -1, 1, 0, 0, 0, 0]) ]*2,
             8: [ np.array([0,  0, 0, 0, -1, 0, 1, 0, 0, 0]) ]*2,
             9: [ np.array([0,  0, 0, 0, -1, 0, 0, 1, 0, 0]) ]*2,
             10: [ np.array([0,  0, 0, 0, -1, 0, 0, 0, 1, 0]) ]*2,
             11:[ np.array([0,  0, 0, 0, -1, 0, 0, 0, 0, 1]) ]*2 },

        7: { 8: [ np.array([0,  0, 0, 0, 0, -1, 1, 0, 0, 0]) ]*2,
             9: [ np.array([0,  0, 0, 0, 0, -1, 0, 1, 0, 0]) ]*2,
             10: [ np.array([0,  0, 0, 0, 0, -1, 0, 0, 1, 0]) ]*2,
             11:[ np.array([0,  0, 0, 0, 0, -1, 0, 0, 0, 1]) ]*2 },

        8: { 9: [ np.array([0,  0, 0, 0, 0, 0, -1, 1, 0, 0]) ]*2,
             10: [ np.array([0,  0, 0, 0, 0, 0, -1, 0, 1, 0]) ]*2,
             11:[ np.array([0, 0, 0, 0, 0, 0,  -1, 0, 0, 1]) ]*2 },

        9: { 10: [ np.array([0,  0, 0, 0, 0, 0, 0, -1, 1, 0]) ]*2,
             11:[ np.array([0, 0, 0, 0, 0, 0, 0,  -1,  0, 1]) ]*2 },

        10: { 11:[ np.array([0, 0, 0, 0, 0, 0, 0, 0, -1, 1]) ]*2 },  } 
    
    N_plus =  collections.defaultdict(dict)
    N_plus[2][3] = [ 2, 3 ]
    N_plus[2][4] = [ 2, 4 ]
    N_plus[2][5] = [ 2, 5 ]
    N_plus[2][6] = [ 2, 6 ]
    N_plus[2][7] = [ 2, 7 ]
    N_plus[2][8] = [ 2, 8 ]
    N_plus[2][9] = [ 2, 9 ]
    N_plus[2][10] = [ 2, 10 ]
    N_plus[2][11] = [2, 11 ]

    N_plus[3][4] = [ 3, 4 ]
    N_plus[3][5] = [ 3, 5 ]
    N_plus[3][6] = [ 3, 6 ]
    N_plus[3][7] = [ 3, 7 ]
    N_plus[3][8] = [ 3, 8 ]
    N_plus[3][9] = [ 3, 9 ]
    N_plus[3][10] = [ 3, 10 ]
    N_plus[3][11] = [3, 11 ]

    N_plus[4][5] = [ 4, 5 ]
    N_plus[4][6] = [ 4, 6 ]
    N_plus[4][7] = [ 4, 7 ]
    N_plus[4][8] = [ 4, 8 ]
    N_plus[4][9] = [ 4, 9 ]
    N_plus[4][10] = [ 4, 10 ]
    N_plus[4][11] = [4, 11]

    N_plus[5][6] = [ 5, 6 ]
    N_plus[5][7] = [ 5, 7 ]
    N_plus[5][8] = [ 5, 8 ]
    N_plus[5][9] = [ 5, 9 ]
    N_plus[5][10] = [ 5, 10 ]
    N_plus[5][11] = [5, 11 ]

    N_plus[6][7] = [ 6, 7 ]
    N_plus[6][8] = [ 6, 8 ]
    N_plus[6][9] = [ 6, 9 ]
    N_plus[6][10] = [ 6, 10 ]
    N_plus[6][11] = [6, 11 ]

    N_plus[7][8] = [ 7, 8 ]
    N_plus[7][9] = [ 7, 9 ]
    N_plus[7][10] = [7, 10 ]
    N_plus[7][11] = [7, 11 ]

    N_plus[8][9] = [ 8, 9 ]
    N_plus[8][10] = [ 8, 10 ]
    N_plus[8][11] = [8, 11 ]

    N_plus[9][10] = [ 9, 10 ]
    N_plus[9][11] = [9, 11 ]

    N_plus[10][11] = [ 10, 11 ]

    V = collections.defaultdict(dict)
    V[2][3] = [ 0, 1 ] 
    V[2][4] = [ 0, 1 ]  
    V[2][5] = [ 0, 1 ]  
    V[2][6] = [ 0, 1 ]  
    V[2][7] = [ 0, 1 ]  
    V[2][8] = [ 0, 1 ] 
    V[2][9] = [ 0, 1 ]  
    V[2][10] = [ 0, 1 ]  
    V[2][11] = [0, 1 ]  

    V[3][4] = [ 0, 1]
    V[3][5] = [ 0, 1]
    V[3][6] = [ 0, 1]
    V[3][7] = [ 0, 1]
    V[3][8] = [ 0, 1]
    V[3][9] = [ 0, 1]
    V[3][10] = [ 0, 1]
    V[3][11] = [0, 1]

    V[4][5] = [ 0, 1]
    V[4][6] = [ 0, 1]
    V[4][7] = [ 0, 1]
    V[4][8] = [ 0, 1]
    V[4][9] = [ 0, 1]
    V[4][10] = [ 0, 1]
    V[4][11] = [0, 1 ]

    V[5][6] = [ 0, 1]
    V[5][7] = [ 0, 1]
    V[5][8] = [ 0, 1]
    V[5][9] = [ 0, 1]
    V[5][10] = [ 0, 1]
    V[5][11] = [0, 1 ]

    V[6][7] = [ 0, 1]
    V[6][8] = [ 0, 1]
    V[6][9] = [ 0, 1]
    V[6][10] = [ 0, 1]
    V[6][11] = [0, 1 ]

    V[7][8] = [ 0, 1]
    V[7][9] = [ 0, 1]
    V[7][10] = [ 0, 1]
    V[7][11] = [0, 1 ]

    V[8][9] = [ 0, 1]
    V[8][10] = [ 0, 1]
    V[8][11] = [0, 1 ]

    V[9][10] = [ 0, 1]
    V[9][11] = [0, 1 ]

    V[10][11] = [ 0, 1 ]

    informative_symbols = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9,]

    return Game( name, informative_symbols,  noise, LossMatrix, FeedbackMatrix, signal_matrices, mathcal_N, v, N_plus, V )


















